package main.java;

import main.java.exceptions.BadTypeException;

/**
 * The Class Entry.
 * The type to be stored in stack.
 * 
 * @Author Christopher Buss.
 */
public class Entry {
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((other == null) ? 0 : other.hashCode());
    result = prime * result + ((str == null) ? 0 : str.hashCode());
    result = prime * result + ((type == null) ? 0 : type.hashCode());
    result = prime * result + Float.floatToIntBits(value);
    return result;
  }
  
  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    Entry other = (Entry) obj;
    if (this.other != other.other) {
      return false;
    }
    if (str == null) {
      if (other.str != null) {
        return false;
      }
    } else if (!str.equals(other.str)) {
      return false;
    }
    if (type != other.type) {
      return false;
    }
    if (Float.floatToIntBits(value) != Float.floatToIntBits(other.value)) {
      return false;
    }
    return true;
  }
  
  @Override
  public String toString() {
    return "Entry [value=" + value + ", other=" + other + ", str=" + str + ", type=" + type + "]";
  }

  /** Number used in calculation. */
  private float value;
  
  /** Symbol used for arithmetic. */
  private Symbol other;
  
  /** String provided by user. */
  private String str;
  
  /** The type of the provided constructor. */
  private Type type;


  /**
   * Instantiates a new entry.
   *
   * @param value - an input of a float value
   */
  public Entry(float value) {
    this.type = Type.NUMBER;
    this.value = value;
  }

  /**
   * Instantiates a new entry.
   *
   * @param which - an input of a symbol
   */
  public Entry(Symbol which) {
    this.type = Type.SYMBOL;
    this.other = which;
  }

  /**
   * Instantiates a new entry.
   *
   * @param string - an input of a string
   */
  public Entry(String string) {
    this.type = Type.STRING;
    this.str = string;
  }

  /**
   * Gets the float value.
   *
   * @return value - the float used in calculation
   * @throws BadTypeException - called when entry isnt a value
   */
  public float getValue() throws BadTypeException {
    if (this.type != Type.NUMBER) {
      throw new BadTypeException("There is no Value present.");      
    }
    return this.value;
  }

  /**
   * Gets the symbol.
   *
   * @return symbol - the arithmetic symbol stored
   * @throws BadTypeException - called when entry isnt a symbol
   */
  public Symbol getSymbol() throws BadTypeException {
    if (this.type != Type.SYMBOL) {
      throw new BadTypeException("There is no Symbol present.");
    }
    return this.other;
  }

  /**
   * Gets the string.
   *
   * @return the string 
   * @throws BadTypeException - called when entry isnt a string
   */
  public String getString() throws BadTypeException {
    if (this.type != Type.STRING) {
      throw new BadTypeException("There is no String present.");
    }
    return this.str;    
  }

  /**
   * Gets the type.
   *
   * @return the type of the entry
   */
  public Type getType() {
    return this.type;
  }
}
